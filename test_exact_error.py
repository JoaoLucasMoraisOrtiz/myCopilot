#!/usr/bin/env python3
"""
Teste espec√≠fico para reproduzir o erro exato do usu√°rio.
"""

from core.agent.response_parser import AgentResponseParser

def test_exact_user_error():
    """Reproduz exatamente o erro reportado pelo usu√°rio."""
    
    parser = AgentResponseParser()
    
    print("üêõ Reproduzindo o erro exato do usu√°rio")
    print("=" * 60)
    
    # Exatamente como o usu√°rio reportou
    exact_user_input = '''{"command": "create_file", "args": ["package.json", "{\\n  \\"name\\": \\"form-builder\\",\\n  \\"version\\": \\"1.0.0\\",\\n  \\"main\\": \\"index.js\\",\\n  \\"scripts\\": {\\n    \\"dev\\": \\"next dev\\",\\n    \\"build\\": \\"next build\\",\\n    \\"start\\": \\"next start\\"\\n  },\\n  \\"dependencies\\": {\\n    \\"next\\": \\"latest\\",\\n    \\"react\\": \\"latest\\",\\n    \\"react-dom\\": \\"latest\\"\\n  },\\n  \\"devDependencies\\": {\\n    \\"typescript\\": \\"latest\\",\\n    \\"@types/react\\": \\"latest\\",\\n    \\"@types/node\\": \\"latest\\"\\n  }\\n}"]}'''
    
    print("üìù Input exato do usu√°rio:")
    print(exact_user_input[:200] + "...")
    
    print("\nüîç Tentando fazer parse...")
    result = parser.parse_action_from_response(exact_user_input)
    
    print(f"\n‚úÖ Resultado final:")
    print(f"  Comando: {result.get('command')}")
    print(f"  N√∫mero de argumentos: {len(result.get('args', []))}")
    
    if result.get('command') == 'create_file':
        args = result.get('args', [])
        if len(args) >= 2:
            print(f"  Arquivo: {args[0]}")
            print(f"  Conte√∫do (primeiros 200 chars):")
            print(f"    {args[1][:200]}...")
            
            # Verifica se foi decodificado corretamente
            content = args[1]
            if '"name": "form-builder"' in content and '\\n' not in content:
                print("üéâ SUCCESS: JSON foi decodificado corretamente!")
                print("‚úÖ As quebras de linha foram convertidas de \\n para \\n reais")
                print("‚úÖ As aspas foram decodificadas de \\\\ para \\\"")
            else:
                print("‚ùå FAILED: JSON n√£o foi decodificado corretamente")
                if '\\\\n' in content:
                    print("  - Ainda cont√©m \\\\n escapado")
                if '\\\\"' in content:
                    print("  - Ainda cont√©m aspas escapadas")
        else:
            print("‚ùå Argumentos insuficientes")
    else:
        print("‚ùå Comando n√£o foi reconhecido corretamente")
    
    # Teste para verificar se o content pode ser parseado como JSON v√°lido
    if result.get('command') == 'create_file' and len(result.get('args', [])) >= 2:
        import json
        try:
            parsed_json = json.loads(result['args'][1])
            print(f"\n‚úÖ VALIDATION: Conte√∫do √© JSON v√°lido!")
            print(f"  Nome do projeto: {parsed_json.get('name')}")
            print(f"  Vers√£o: {parsed_json.get('version')}")
            print(f"  Depend√™ncias: {list(parsed_json.get('dependencies', {}).keys())}")
        except json.JSONDecodeError as e:
            print(f"\n‚ùå VALIDATION: Conte√∫do N√ÉO √© JSON v√°lido: {e}")

def test_manual_json_parsing():
    """Teste manual para entender o problema."""
    
    # Exemplo de como o JSON deveria ser
    correct_json = '{"command": "create_file", "args": ["package.json", "{\\"name\\": \\"test\\"}"]}'
    
    print("\n" + "=" * 60)
    print("üîß Teste manual de parsing JSON")
    
    print(f"JSON correto simples: {correct_json}")
    
    import json
    try:
        parsed = json.loads(correct_json)
        print(f"‚úÖ Parse bem-sucedido: {parsed}")
        print(f"Conte√∫do decodificado: {parsed['args'][1]}")
    except json.JSONDecodeError as e:
        print(f"‚ùå Erro de parse: {e}")

if __name__ == "__main__":
    test_exact_user_error()
    test_manual_json_parsing()
