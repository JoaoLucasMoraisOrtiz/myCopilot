#!/usr/bin/env python3
"""
Validador de Configura√ß√£o de Migra√ß√£o
Valida se o arquivo YAML/JSON est√° correto antes de executar a migra√ß√£o
"""

import yaml
import json
import sys
from pathlib import Path

def validate_migration_config(config_path):
    """Valida um arquivo de configura√ß√£o de migra√ß√£o"""
    
    print(f"üîç Validando arquivo: {config_path}")
    
    # Verifica se arquivo existe
    if not Path(config_path).exists():
        print(f"‚ùå Erro: Arquivo n√£o encontrado: {config_path}")
        return False
    
    try:
        # Tenta carregar como YAML primeiro
        with open(config_path, 'r', encoding='utf-8') as f:
            if config_path.endswith('.json'):
                config = json.load(f)
            else:
                config = yaml.safe_load(f)
        
        print("‚úÖ Arquivo carregado com sucesso")
        
    except yaml.YAMLError as e:
        print(f"‚ùå Erro de sintaxe YAML: {e}")
        return False
    except json.JSONDecodeError as e:
        print(f"‚ùå Erro de sintaxe JSON: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao carregar arquivo: {e}")
        return False
    
    # Valida estrutura
    if 'migration_config' not in config:
        print("‚ùå Erro: Chave 'migration_config' n√£o encontrada")
        return False
    
    migration_config = config['migration_config']
    
    # Campos obrigat√≥rios
    required_fields = [
        'project_name',
        'migration_objective', 
        'current_stack',
        'target_stack'
    ]
    
    print("\nüìã Validando campos obrigat√≥rios...")
    for field in required_fields:
        if field not in migration_config:
            print(f"‚ùå Campo obrigat√≥rio ausente: {field}")
            return False
        else:
            print(f"‚úÖ {field}: {migration_config[field] if isinstance(migration_config[field], str) else '(configurado)'}")
    
    # Valida current_stack
    print("\nüîß Validando stack atual...")
    current_stack = migration_config.get('current_stack', {})
    if 'language' in current_stack and 'version' in current_stack:
        print(f"‚úÖ Stack atual: {current_stack['language']} {current_stack['version']}")
    else:
        print("‚ö†Ô∏è Aviso: Informa√ß√µes do stack atual incompletas")
    
    # Valida target_stack  
    print("üéØ Validando stack alvo...")
    target_stack = migration_config.get('target_stack', {})
    if 'language' in target_stack and 'version' in target_stack:
        print(f"‚úÖ Stack alvo: {target_stack['language']} {target_stack['version']}")
    else:
        print("‚ö†Ô∏è Aviso: Informa√ß√µes do stack alvo incompletas")
    
    # Valida arquitetura alvo
    if 'target_architecture' in migration_config:
        arch = migration_config['target_architecture']
        print(f"üèóÔ∏è Arquitetura alvo: {arch.get('type', 'n√£o especificado')}")
        print(f"üì° API Style: {arch.get('api_style', 'n√£o especificado')}")
    
    # Valida componentes cr√≠ticos
    if 'critical_components' in migration_config:
        components = migration_config['critical_components']
        print(f"\nüî• Componentes cr√≠ticos identificados: {len(components)}")
        for comp in components:
            if 'name' in comp:
                criticality = comp.get('criticality', 'medium')
                print(f"   ‚Ä¢ {comp['name']} ({criticality})")
    
    # Valida restri√ß√µes
    if 'constraints' in migration_config:
        constraints = migration_config['constraints']
        print(f"\n‚è∞ Restri√ß√µes:")
        if 'timeline' in constraints:
            print(f"   ‚Ä¢ Timeline: {constraints['timeline']}")
        if 'budget_limit' in constraints:
            print(f"   ‚Ä¢ Or√ßamento: {constraints['budget_limit']}")
        if 'max_downtime' in constraints:
            print(f"   ‚Ä¢ Downtime m√°ximo: {constraints['max_downtime']}")
    
    print(f"\nüéâ Configura√ß√£o v√°lida! Arquivo pronto para uso.")
    return True

def main():
    if len(sys.argv) != 2:
        print("Uso: python validate_config.py <caminho_do_arquivo>")
        print("\nExemplos:")
        print("  python validate_config.py migration_config.yaml")
        print("  python validate_config.py /caminho/para/config.json")
        sys.exit(1)
    
    config_path = sys.argv[1]
    
    print("üß™ VALIDADOR DE CONFIGURA√á√ÉO DE MIGRA√á√ÉO")
    print("=" * 50)
    
    if validate_migration_config(config_path):
        print("\n‚úÖ Sucesso! Sua configura√ß√£o est√° pronta para uso.")
        print("Execute: python main.py")
        print("Escolha: [0] Fase 0: Configura√ß√£o da Migra√ß√£o")
        sys.exit(0)
    else:
        print("\n‚ùå Falha na valida√ß√£o. Corrija os erros e tente novamente.")
        print("\nüí° Dicas:")
        print("  ‚Ä¢ Use o arquivo migration_config_example.yaml como base")
        print("  ‚Ä¢ Verifique a sintaxe YAML em: https://yaml-online-parser.appspot.com/")
        print("  ‚Ä¢ Consulte o GUIA_DE_USO.md para mais detalhes")
        sys.exit(1)

if __name__ == "__main__":
    main()
