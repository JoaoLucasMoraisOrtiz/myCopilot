"""
Agent Response Parser Module

Respons√°vel por analisar e extrair a√ß√µes e mem√≥ria de trabalho das respostas do LLM.
"""

import json
import re
from typing import Dict, Any, Optional, Tuple


class AgentResponseParser:
    """Classe respons√°vel por parsear respostas do LLM e extrair comandos e world_state."""
    
    def __init__(self):
        self.valid_commands = {
            "list_files", "open_file", "search_dir", "create_file", "edit_code", 
            "run_test", "submit", "multi_create_file"
        }
    
    def parse(self, response_text: str) -> Tuple[Optional[str], Optional[Dict]]:
        """
        Analisa a resposta do LLM.

        Returns:
            Uma tupla contendo (world_state, action_json).
            Retorna (None, None) se n√£o conseguir analisar.
        """
        try:
            print(f"üîç Analisando resposta do LLM ({len(response_text)} chars)")
            
            # Extrai a se√ß√£o de atualiza√ß√£o do estado
            world_state = self._extract_section(response_text, "Atualiza√ß√£o do Estado")
            if world_state:
                print(f"üß† World State extra√≠do: {world_state[:100]}...")
            
            # Extrai a se√ß√£o de a√ß√£o
            action_str = self._extract_section(response_text, "A√ß√£o")
            if not action_str:
                print("‚ö†Ô∏è Se√ß√£o 'A√ß√£o' n√£o encontrada, tentando fallback")
                # Fallback para m√©todo antigo se n√£o encontrar se√ß√£o A√ß√£o
                action_json = self._extract_json_from_response(response_text)
                return world_state, action_json

            print(f"üìù Se√ß√£o A√ß√£o extra√≠da: {action_str}")
            
            # Limpa e extrai o JSON do bloco de a√ß√£o
            try:
                # Remove chaves triplas se presentes
                if action_str.startswith('{{{') and action_str.endswith('}}}'):
                    action_str = action_str[3:-3]
                    action_str = '{' + action_str + '}'
                
                # Tenta parsing direto
                action_json = json.loads(action_str)
                print(f"‚úÖ JSON da a√ß√£o parseado com sucesso: {action_json}")
                return world_state, action_json
                
            except json.JSONDecodeError as e:
                print(f"‚ùå Erro ao parsear JSON da a√ß√£o: {e}")
                print(f"JSON problem√°tico: {action_str}")
                
                # Fallback: tenta extrair JSON com regex
                json_match = re.search(r'\{.*\}', action_str, re.DOTALL)
                if json_match:
                    try:
                        action_json = json.loads(json_match.group(0))
                        return world_state, action_json
                    except json.JSONDecodeError:
                        pass
                
                return world_state, None

        except Exception as e:
            print(f"üö® Erro geral ao analisar resposta do LLM: {e}")
            print(f"Resposta recebida:\n{response_text}")
            return None, None

    def _extract_section(self, text: str, section_name: str) -> Optional[str]:
        """Extrai o conte√∫do de uma se√ß√£o espec√≠fica (ex: **A√ß√£o:**)."""
        # Padr√£o mais flex√≠vel que lida com diferentes formata√ß√µes
        patterns = [
            rf'\*\*{section_name}:\*\*\s*(.*?)(?=\s*\*\*|$)',  # **Se√ß√£o:**
            rf'\*\*{section_name}\*\*\s*(.*?)(?=\s*\*\*|$)',   # **Se√ß√£o**
            rf'{section_name}:\s*(.*?)(?=\s*\*\*|$)',          # Se√ß√£o:
        ]
        
        for pattern in patterns:
            match = re.search(pattern, text, re.DOTALL | re.IGNORECASE)
            if match:
                content = match.group(1).strip()
                # Se a se√ß√£o √© "A√ß√£o", tenta extrair apenas o JSON
                if section_name.lower() == "a√ß√£o" or section_name.lower() == "action":
                    json_match = re.search(r'\{.*\}', content, re.DOTALL)
                    if json_match:
                        return json_match.group(0)
                return content
        return None
    
    # Mantenha seu m√©todo antigo para compatibilidade se necess√°rio
    def parse_action_from_response(self, response_text: str) -> Optional[Dict]:
        """Mant√©m compatibilidade com c√≥digo existente."""
        _, action_json = self.parse(response_text)
        return action_json

    def _extract_json_from_response(self, response_text: str) -> Optional[Dict[str, Any]]:
        """Extrai JSON da resposta do LLM com parsing robusto."""
        
        # Estrat√©gia 1: JSON em bloco markdown
        json_block_match = re.search(r'```json\s*\n(.*?)\n```', response_text, re.DOTALL)
        if json_block_match:
            json_str = json_block_match.group(1).strip()
            try:
                return json.loads(json_str)
            except json.JSONDecodeError:
                pass
        
        # Estrat√©gia 2: JSON com chaves triplas {{{ }}} - comum em templates
        triple_brace_match = re.search(r'\{\{\{(.*?)\}\}\}', response_text, re.DOTALL)
        if triple_brace_match:
            json_str = '{' + triple_brace_match.group(1) + '}'
            try:
                return json.loads(json_str)
            except json.JSONDecodeError:
                pass
        
        # Estrat√©gia 3: JSON balanceado iniciando com {"command"
        json_match = re.search(r'\{[^}]*"command"[^}]*\}', response_text, re.DOTALL)
        if json_match:
            try:
                return json.loads(json_match.group(0))
            except json.JSONDecodeError:
                pass
        
        # Estrat√©gia 4: Busca por qualquer estrutura JSON v√°lida
        json_pattern = r'\{(?:[^{}]|{[^{}]*})*\}'
        json_matches = re.findall(json_pattern, response_text)
        for json_candidate in json_matches:
            try:
                parsed = json.loads(json_candidate)
                if isinstance(parsed, dict) and 'command' in parsed:
                    return parsed
            except json.JSONDecodeError:
                continue
        
        return None
