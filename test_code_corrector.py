"""
Teste do Sistema de Corre√ß√£o de C√≥digo

Este script demonstra o funcionamento do mini-compilador corretor
integrado ao sistema de gera√ß√£o de c√≥digo.
"""

import sys
sys.path.append('..')

from core.code_corrector import get_corrector_for_language

def test_python_corrections():
    """Testa corre√ß√µes em c√≥digo Python."""
    print("üêç Testando corre√ß√µes Python...")
    
    # C√≥digo Python com erros intencionais
    buggy_python_code = '''
def calculate_sum(a, b)
    if a > 0
        result = a + b
        print "Result is:", result
    return result

# Fun√ß√£o sem indenta√ß√£o adequada
def broken_function():
x = 10
y = 20
return x + y

# String n√£o fechada
message = "Hello World
'''
    
    print("C√≥digo original:")
    print(buggy_python_code)
    print("\n" + "="*50)
    
    corrector = get_corrector_for_language('python')
    result = corrector.correct(buggy_python_code)
    
    print("C√≥digo corrigido:")
    print(result.corrected_code)
    print("\n" + "="*50)
    
    print("Corre√ß√µes aplicadas:")
    for correction in result.corrections_applied:
        print(f"  ‚Ä¢ {correction}")
    
    print(f"\nCompila√ß√£o bem-sucedida: {'‚úÖ' if result.compilation_successful else '‚ùå'}")
    if result.error_messages:
        print("Erros restantes:")
        for error in result.error_messages:
            print(f"  ‚Ä¢ {error}")

def test_java_corrections():
    """Testa corre√ß√µes em c√≥digo Java."""
    print("\n‚òï Testando corre√ß√µes Java...")
    
    # C√≥digo Java com erros intencionais
    buggy_java_code = '''
public class Calculator {
    static void main(String[] args) {
        int x = 10
        int y = 20
        System.out.println("Sum: " + (x + y))
    }
    
    public int multiply(int a, int b) 
        return a * b
    }
}
'''
    
    print("C√≥digo original:")
    print(buggy_java_code)
    print("\n" + "="*50)
    
    corrector = get_corrector_for_language('java')
    result = corrector.correct(buggy_java_code)
    
    print("C√≥digo corrigido:")
    print(result.corrected_code)
    print("\n" + "="*50)
    
    print("Corre√ß√µes aplicadas:")
    for correction in result.corrections_applied:
        print(f"  ‚Ä¢ {correction}")
    
    print(f"\nCompila√ß√£o bem-sucedida: {'‚úÖ' if result.compilation_successful else '‚ùå'}")
    if result.error_messages:
        print("Erros restantes:")
        for error in result.error_messages:
            print(f"  ‚Ä¢ {error}")

def test_javascript_corrections():
    """Testa corre√ß√µes em c√≥digo JavaScript."""
    print("\nüåê Testando corre√ß√µes JavaScript...")
    
    # C√≥digo JavaScript com erros intencionais
    buggy_js_code = '''
funtion calculate(x, y) {
    if (x > 0 {
        let result = x + y
        console.log("Result:", result)
        retrun result
    }
}

const message = "Hello World
const numbers = [1, 2, 3, 4, 5

// Arrow function malformada
const multiply = x, y => x * y
'''
    
    print("C√≥digo original:")
    print(buggy_js_code)
    print("\n" + "="*50)
    
    corrector = get_corrector_for_language('javascript')
    result = corrector.correct(buggy_js_code)
    
    print("C√≥digo corrigido:")
    print(result.corrected_code)
    print("\n" + "="*50)
    
    print("Corre√ß√µes aplicadas:")
    for correction in result.corrections_applied:
        print(f"  ‚Ä¢ {correction}")
    
    print(f"\nValida√ß√£o bem-sucedida: {'‚úÖ' if result.compilation_successful else '‚ùå'}")
    if result.error_messages:
        print("Erros restantes:")
        for error in result.error_messages:
            print(f"  ‚Ä¢ {error}")

def test_integration_with_agent():
    """Demonstra a integra√ß√£o com o agente."""
    print("\nü§ñ Testando integra√ß√£o com o agente...")
    
    # Simula o comportamento do agente
    from core.agent.agent_core import AgentCore
    
    # Este √© um exemplo simplificado
    print("A integra√ß√£o est√° configurada no m√©todo _apply_code_correction do AgentCore")
    print("Quando o LLM gerar c√≥digo atrav√©s do comando save_code:")
    print("1. O c√≥digo ser√° automaticamente validado pelo compilador padr√£o")
    print("2. Se houver erros, o corretor ser√° acionado")
    print("3. O c√≥digo corrigido ser√° salvo no projeto")
    print("4. Um log das corre√ß√µes ser√° exibido ao usu√°rio")

if __name__ == "__main__":
    print("üîß Sistema de Corre√ß√£o Autom√°tica de C√≥digo")
    print("=" * 60)
    
    try:
        test_python_corrections()
        test_java_corrections() 
        test_javascript_corrections()
        test_integration_with_agent()
        
        print("\n‚úÖ Todos os testes conclu√≠dos!")
        print("\nO sistema est√° pronto para ser usado com o agente.")
        print("Agora quando o LLM gerar c√≥digo com erros de sintaxe,")
        print("eles ser√£o automaticamente detectados e corrigidos!")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante os testes: {e}")
        import traceback
        traceback.print_exc()
