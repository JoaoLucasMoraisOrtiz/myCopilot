#!/usr/bin/env python3
"""
Script de teste para validar a filtragem de prompts no sistema de migra√ß√£o
"""

import os
import sys
from datetime import datetime

# Adiciona o diret√≥rio atual ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from main import load_previous_results_only, OUTPUT_DIR

def create_test_file_with_prompts():
    """Cria um arquivo de teste com prompts misturados"""
    
    test_content = """# An√°lise do Sistema Legado

## Componentes Principais

O sistema possui os seguintes componentes essenciais:
- M√≥dulo de autentica√ß√£o
- Sistema de processamento de dados
- Interface web responsiva

## Prompt 3.2: Planos de Execu√ß√£o

**Importante:** Detalhe a execu√ß√£o t√©cnica completa para cada deliverable identificado, incluindo:

1. **An√°lise de Depend√™ncias**
   - Mapeamento de bibliotecas utilizadas
   - Identifica√ß√£o de conflitos potenciais

2. **Estrat√©gia de Implementa√ß√£o**
   - Organize por sprints quinzenais
   - Deliverables claros para cada sprint

## Arquitetura Atual

A arquitetura do sistema legado apresenta:
- Monolito em Java
- Banco de dados Oracle
- Frontend em JSP

### Instru√ß√µes para an√°lise:

Desenvolva planos detalhados considerando as tecnologias identificadas.
Baseado na an√°lise anterior, estruture as etapas.

## Recomenda√ß√µes T√©cnicas

Para a migra√ß√£o, recomenda-se:
- Ado√ß√£o de microservi√ßos
- Migra√ß√£o para PostgreSQL
- Frontend moderno em React

### Considera√ß√µes de Performance

O sistema atual apresenta gargalos:
- Consultas SQL n√£o otimizadas
- Aus√™ncia de cache
- Processamento s√≠ncrono

## Prompt Final: Valida√ß√£o

Importante:** Detalhe todos os aspectos t√©cnicos identificados.
Organize por sprints e estabele√ßa deliverables claros.
"""
    
    test_file = os.path.join(OUTPUT_DIR, "test_prompt_contamination.md")
    os.makedirs(OUTPUT_DIR, exist_ok=True)
    
    with open(test_file, 'w', encoding='utf-8') as f:
        f.write(test_content)
    
    return test_file, len(test_content)

def test_prompt_filtering():
    """Testa a filtragem de prompts"""
    
    print("üß™ TESTE DE FILTRAGEM DE PROMPTS")
    print("=" * 50)
    
    # Cria arquivo de teste
    test_file, original_size = create_test_file_with_prompts()
    print(f"üìÅ Arquivo de teste criado: {os.path.basename(test_file)}")
    print(f"üìè Tamanho original: {original_size:,} caracteres")
    
    # Testa a fun√ß√£o de filtragem
    print("\nüîÑ Aplicando filtro de prompts...")
    
    try:
        filtered_content = load_previous_results_only([test_file])
        filtered_size = len(filtered_content)
        
        print(f"üìè Tamanho filtrado: {filtered_size:,} caracteres")
        
        if filtered_size < original_size:
            reduction_pct = ((original_size - filtered_size) / original_size) * 100
            print(f"‚úÖ Redu√ß√£o: {reduction_pct:.1f}%")
        else:
            print("‚ö†Ô∏è  Nenhuma redu√ß√£o detectada")
        
        # Verifica se prompts foram removidos
        print("\nüîç AN√ÅLISE DO CONTE√öDO FILTRADO:")
        print("-" * 30)
        
        prompt_indicators = [
            'prompt ', '**prompt', 'instru√ß√µes para', 'desenvolva',
            'importante:** detalhe', 'organize por sprints',
            'baseado na an√°lise', 'deliverables claros'
        ]
        
        prompts_found = []
        for indicator in prompt_indicators:
            if indicator in filtered_content.lower():
                prompts_found.append(indicator)
        
        if prompts_found:
            print("‚ùå PROMPTS AINDA PRESENTES:")
            for prompt in prompts_found:
                print(f"   - '{prompt}'")
        else:
            print("‚úÖ Nenhum prompt detectado no conte√∫do filtrado")
        
        # Mostra amostra do conte√∫do filtrado
        print(f"\nüìÑ AMOSTRA DO CONTE√öDO FILTRADO ({min(500, filtered_size)} chars):")
        print("-" * 50)
        print(filtered_content[:500])
        if len(filtered_content) > 500:
            print("\n... (conte√∫do truncado)")
        
        # An√°lise por se√ß√µes
        sections = filtered_content.split('\n##')
        print(f"\nüìä SE√á√ïES PRESERVADAS: {len(sections)}")
        for i, section in enumerate(sections[:3]):  # Mostra apenas 3 primeiras
            section_preview = section.strip()[:100].replace('\n', ' ')
            print(f"   {i+1}. {section_preview}...")
        
    except Exception as e:
        print(f"‚ùå Erro durante o teste: {e}")
        return False
    
    # Limpa arquivo de teste
    try:
        os.remove(test_file)
        print(f"\nüóëÔ∏è  Arquivo de teste removido")
    except:
        pass
    
    return True

def test_multiple_scenarios():
    """Testa m√∫ltiplos cen√°rios de filtragem"""
    
    print("\nüß™ TESTE DE M√öLTIPLOS CEN√ÅRIOS")
    print("=" * 50)
    
    scenarios = [
        {
            "name": "Arquivo com prompt no in√≠cio",
            "content": """**Prompt 1.0:** Analise o sistema completo
            
# An√°lise Real
Este √© conte√∫do v√°lido que deve ser preservado.
"""
        },
        {
            "name": "Arquivo com prompt no meio",
            "content": """# An√°lise Valid
Conte√∫do importante aqui.

## Instru√ß√µes para desenvolvimento:
Desenvolva planos detalhados considerando...

# Continua√ß√£o v√°lida
Mais conte√∫do importante.
"""
        },
        {
            "name": "Arquivo sem prompts",
            "content": """# Documenta√ß√£o T√©cnica
## Componentes
- M√≥dulo A
- M√≥dulo B

### Detalhes de implementa√ß√£o
Informa√ß√µes t√©cnicas relevantes.
"""
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\nüìã Cen√°rio {i}: {scenario['name']}")
        
        # Cria arquivo tempor√°rio
        temp_file = os.path.join(OUTPUT_DIR, f"test_scenario_{i}.md")
        with open(temp_file, 'w', encoding='utf-8') as f:
            f.write(scenario['content'])
        
        original_size = len(scenario['content'])
        
        # Testa filtragem
        try:
            filtered = load_previous_results_only([temp_file])
            filtered_size = len(filtered)
            
            if filtered_size < original_size:
                reduction = ((original_size - filtered_size) / original_size) * 100
                print(f"   ‚úÖ Redu√ß√£o: {reduction:.1f}% ({original_size}‚Üí{filtered_size})")
            else:
                print(f"   ‚ö™ Sem redu√ß√£o ({original_size}‚Üí{filtered_size})")
        
        except Exception as e:
            print(f"   ‚ùå Erro: {e}")
        
        # Remove arquivo tempor√°rio
        try:
            os.remove(temp_file)
        except:
            pass

if __name__ == "__main__":
    print(f"üïí Teste iniciado em: {datetime.now().strftime('%H:%M:%S')}")
    
    success = test_prompt_filtering()
    test_multiple_scenarios()
    
    if success:
        print("\nüéâ TODOS OS TESTES CONCLU√çDOS!")
    else:
        print("\n‚ùå Alguns testes falharam.")
    
    print(f"üïí Teste finalizado em: {datetime.now().strftime('%H:%M:%S')}")
