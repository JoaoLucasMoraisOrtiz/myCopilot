#!/usr/bin/env python3
"""
Teste das funcionalidades de feedback loop implementadas
"""

import os
import sys
import tempfile
import shutil

# Adiciona o diret√≥rio atual ao path para importar os m√≥dulos
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from main import (
    initialize_global_context, 
    update_global_context_with_validation,
    update_global_context_with_integration,
    load_enhanced_context,
    OUTPUT_DIR
)

def test_feedback_loops():
    """Testa os feedback loops P4_2 -.-> Context3 e P4_3 -.-> Context3"""
    
    # Cria um diret√≥rio tempor√°rio para testes
    original_output_dir = OUTPUT_DIR
    test_dir = tempfile.mkdtemp()
    
    try:
        # Sobrescreve OUTPUT_DIR temporariamente
        import main
        main.OUTPUT_DIR = test_dir
        
        print("üß™ Testando Feedback Loops...")
        
        # Testa inicializa√ß√£o do contexto global
        print("\n1. Testando inicializa√ß√£o do contexto global...")
        initialize_global_context()
        
        global_context_file = os.path.join(test_dir, "global_context.md")
        assert os.path.exists(global_context_file), "Arquivo de contexto global n√£o foi criado"
        print("‚úÖ Contexto global inicializado")
        
        # Testa feedback de valida√ß√£o aprovada
        print("\n2. Testando feedback de valida√ß√£o aprovada...")
        validation_result = "‚úÖ APROVADO - C√≥digo atende aos crit√©rios de qualidade"
        update_global_context_with_validation(1, "Implementar API de usu√°rios", validation_result, is_approved=True)
        print("‚úÖ Feedback de valida√ß√£o aprovada registrado")
        
        # Testa feedback de valida√ß√£o rejeitada
        print("\n3. Testando feedback de valida√ß√£o rejeitada...")
        validation_result = "‚ùå REJEITAR - Problemas de seguran√ßa identificados"
        update_global_context_with_validation(2, "Implementar autentica√ß√£o", validation_result, is_approved=False)
        print("‚úÖ Feedback de valida√ß√£o rejeitada registrado")
        
        # Testa feedback de integra√ß√£o
        print("\n4. Testando feedback de integra√ß√£o...")
        integration_plan = """
        1. Deploy em ambiente de staging
        2. Testes de integra√ß√£o com banco de dados
        3. Valida√ß√£o de APIs externas
        """
        update_global_context_with_integration(1, "Implementar API de usu√°rios", integration_plan, success=True)
        print("‚úÖ Feedback de integra√ß√£o registrado")
        
        # Testa carregamento de contexto melhorado
        print("\n5. Testando carregamento de contexto melhorado...")
        
        # Cria arquivos de contexto das fases anteriores
        phase_files = ["architecture-analysis.md", "business-flows.md", "target-architecture.md"]
        for filename in phase_files:
            filepath = os.path.join(test_dir, filename)
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(f"# {filename}\nConte√∫do de exemplo para {filename}")
        
        enhanced_context = load_enhanced_context(phase_files)
        assert "CONTEXTO GLOBAL ACUMULADO" in enhanced_context, "Contexto global n√£o foi inclu√≠do"
        assert "Feedback de Valida√ß√£o" in enhanced_context, "Feedback de valida√ß√£o n√£o encontrado"
        assert "Feedback de Integra√ß√£o" in enhanced_context, "Feedback de integra√ß√£o n√£o encontrado"
        print("‚úÖ Contexto melhorado carregado com sucesso")
        
        # Verifica conte√∫do do arquivo global
        print("\n6. Verificando conte√∫do do contexto global...")
        with open(global_context_file, 'r', encoding='utf-8') as f:
            content = f.read()
        
        assert "Task 1" in content, "Task 1 n√£o encontrada no contexto"
        assert "Task 2" in content, "Task 2 n√£o encontrada no contexto"
        assert "‚úÖ APROVADO" in content, "Valida√ß√£o aprovada n√£o encontrada"
        assert "‚ùå REJEITADO" in content, "Valida√ß√£o rejeitada n√£o encontrada"
        assert "INTEGRA√á√ÉO PLANEJADA" in content, "Integra√ß√£o n√£o encontrada"
        print("‚úÖ Conte√∫do do contexto global est√° correto")
        
        print("\nüéâ Todos os testes passaram! Os feedback loops est√£o funcionando corretamente.")
        print(f"üìÅ Verifique o arquivo de teste em: {global_context_file}")
        
        # Mostra o conte√∫do do contexto global
        print(f"\nüìÑ Conte√∫do do contexto global:")
        print("=" * 60)
        print(content)
        print("=" * 60)
        
    finally:
        # Restaura OUTPUT_DIR original
        main.OUTPUT_DIR = original_output_dir
        
        # Limpa diret√≥rio tempor√°rio (opcional - descomente para limpar)
        # shutil.rmtree(test_dir)
        print(f"\nüóÇÔ∏è  Arquivos de teste mantidos em: {test_dir}")

if __name__ == "__main__":
    test_feedback_loops()
