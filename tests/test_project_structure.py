#!/usr/bin/env python3
"""
Teste do sistema de estrutura de projeto e gera√ß√£o de c√≥digo organizado
"""

import os
import sys
import tempfile
import shutil

# Adiciona o diret√≥rio atual ao path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from project_structure_manager import ProjectStructureManager
from helper.code_parser import extract_structured_code_blocks, StructuredCodeBlock

def test_project_structure_system():
    """Testa o sistema completo de estrutura de projeto"""
    
    # Cria diret√≥rio tempor√°rio para testes
    test_dir = tempfile.mkdtemp()
    
    try:
        print("üß™ Testando Sistema de Estrutura de Projeto...")
        
        # 1. Testa inicializa√ß√£o do gerenciador
        print("\n1. Testando inicializa√ß√£o do gerenciador...")
        manager = ProjectStructureManager(test_dir)
        
        assert (manager.new_system_dir).exists(), "Diret√≥rio do novo sistema n√£o foi criado"
        assert manager.structure_config_file.exists(), "Arquivo de configura√ß√£o n√£o foi criado"
        print("‚úÖ Gerenciador inicializado com sucesso")
        
        # 2. Testa cria√ß√£o de estrutura
        print("\n2. Testando cria√ß√£o de estrutura de diret√≥rios...")
        manager._create_directory_structure()
        
        # Verifica se diret√≥rios foram criados
        expected_dirs = [
            "backend/src/main/java/com/company/app/controller",
            "backend/src/main/java/com/company/app/service",
            "backend/src/main/java/com/company/app/repository",
            "frontend/src/components",
            "frontend/src/pages",
            "database/migrations"
        ]
        
        for dir_path in expected_dirs:
            full_path = manager.new_system_dir / dir_path
            assert full_path.exists(), f"Diret√≥rio {dir_path} n√£o foi criado"
        
        print("‚úÖ Estrutura de diret√≥rios criada com sucesso")
        
        # 3. Testa detec√ß√£o de localiza√ß√£o de arquivos
        print("\n3. Testando detec√ß√£o de localiza√ß√£o de arquivos...")
        
        # Testa c√≥digo Java de controller
        java_controller_code = """
        @RestController
        @RequestMapping("/api/users")
        public class UserController {
            @GetMapping
            public List<User> getAllUsers() {
                return userService.getAllUsers();
            }
        }
        """
        
        location, file_type = manager.determine_file_location(
            java_controller_code, "java", "api", "Implementar REST controller para usu√°rios"
        )
        
        assert "controller" in location, f"Localiza√ß√£o incorreta: {location}"
        assert file_type == "controller", f"Tipo incorreto: {file_type}"
        print("‚úÖ Detec√ß√£o de localiza√ß√£o Java funcionando")
        
        # Testa c√≥digo React
        react_component_code = """
        import React from 'react';
        
        const UserList = () => {
            return (
                <div>
                    <h1>Users</h1>
                </div>
            );
        };
        
        export default UserList;
        """
        
        location, file_type = manager.determine_file_location(
            react_component_code, "javascript", "frontend", "Implementar componente de lista de usu√°rios"
        )
        
        assert "components" in location, f"Localiza√ß√£o incorreta: {location}"
        assert file_type == "component", f"Tipo incorreto: {file_type}"
        print("‚úÖ Detec√ß√£o de localiza√ß√£o React funcionando")
        
        # 4. Testa salvamento de arquivos
        print("\n4. Testando salvamento de arquivos...")
        
        saved_path = manager.save_generated_file(
            code_content=java_controller_code,
            code_language="java",
            task_index=1,
            task_description="Implementar REST controller para usu√°rios",
            component_hint="api-controller"
        )
        
        assert os.path.exists(saved_path), f"Arquivo n√£o foi salvo: {saved_path}"
        print(f"‚úÖ Arquivo salvo em: {saved_path}")
        
        # 5. Testa extra√ß√£o de blocos estruturados
        print("\n5. Testando extra√ß√£o de blocos estruturados...")
        
        structured_response = """
        ARQUIVO: UserService.java
        LOCALIZA√á√ÉO: backend/src/main/java/com/company/app/service
        COMPONENTE: business-service
        DESCRI√á√ÉO: Servi√ßo de neg√≥cio para opera√ß√µes de usu√°rio
        
        ```java
        @Service
        public class UserService {
            private final UserRepository userRepository;
            
            public UserService(UserRepository userRepository) {
                this.userRepository = userRepository;
            }
            
            public List<User> getAllUsers() {
                return userRepository.findAll();
            }
        }
        ```
        
        DEPEND√äNCIAS: UserRepository, User model
        
        ARQUIVO: UserRepository.java
        LOCALIZA√á√ÉO: backend/src/main/java/com/company/app/repository
        COMPONENTE: data-access
        DESCRI√á√ÉO: Reposit√≥rio para acesso aos dados de usu√°rio
        
        ```java
        @Repository
        public interface UserRepository extends JpaRepository<User, Long> {
            List<User> findByActiveTrue();
        }
        ```
        
        DEPEND√äNCIAS: User model, JpaRepository
        """
        
        blocks = extract_structured_code_blocks(structured_response)
        
        assert len(blocks) == 2, f"Deveria extrair 2 blocos, extraiu {len(blocks)}"
        assert blocks[0].filename == "UserService.java", f"Nome incorreto: {blocks[0].filename}"
        assert blocks[0].component == "business-service", f"Componente incorreto: {blocks[0].component}"
        assert len(blocks[0].dependencies) == 2, f"Depend√™ncias incorretas: {blocks[0].dependencies}"
        print("‚úÖ Extra√ß√£o de blocos estruturados funcionando")
        
        # 6. Testa gera√ß√£o de resumo
        print("\n6. Testando gera√ß√£o de resumo do projeto...")
        
        summary = manager.generate_project_summary()
        assert "Resumo do Projeto Migrado" in summary, "Resumo n√£o cont√©m t√≠tulo esperado"
        assert "Total de arquivos gerados" in summary, "Resumo n√£o cont√©m contagem de arquivos"
        print("‚úÖ Gera√ß√£o de resumo funcionando")
        
        # 7. Testa vis√£o geral da estrutura
        print("\n7. Testando vis√£o geral da estrutura...")
        
        overview = manager.get_structure_overview()
        assert "üìÅ Estrutura do Novo Sistema" in overview, "Overview n√£o cont√©m t√≠tulo"
        assert "üìÇ" in overview, "Overview n√£o cont√©m √≠cones de pasta"
        print("‚úÖ Vis√£o geral da estrutura funcionando")
        
        print("\nüéâ Todos os testes do sistema de estrutura passaram!")
        print(f"üìÅ Estrutura de teste criada em: {manager.new_system_dir}")
        
        # Mostra a estrutura criada
        print(f"\nüìÑ Vis√£o geral da estrutura:")
        print("=" * 60)
        print(overview)
        print("=" * 60)
        
        print(f"\nüìä Resumo do projeto:")
        print("=" * 60)
        print(summary)
        print("=" * 60)
        
    except Exception as e:
        print(f"‚ùå Erro durante teste: {e}")
        import traceback
        traceback.print_exc()
    finally:
        # Mant√©m arquivos para inspe√ß√£o (opcional - descomente para limpar)
        # shutil.rmtree(test_dir)
        print(f"\nüóÇÔ∏è Arquivos de teste mantidos em: {test_dir}")

if __name__ == "__main__":
    test_project_structure_system()
